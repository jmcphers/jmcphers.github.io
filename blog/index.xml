<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Jonathan McPherson</title><link>https://jmcphers.github.io/blog/</link><description>Recent content in Blogs on Jonathan McPherson</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 30 Dec 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://jmcphers.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Is Biking Better for the Environment?</title><link>https://jmcphers.github.io/blog/calories-biked/</link><pubDate>Sat, 30 Dec 2017 00:00:00 +0000</pubDate><guid>https://jmcphers.github.io/blog/calories-biked/</guid><description>I&amp;rsquo;ve biked to work almost every day for years, and during most of that time I figured I was doing the climate a big favor by not commuting by car.
Recently, though, I had a worrisome thought. I&amp;rsquo;m not losing any weight, which means that the calories which power my bike are coming entirely from the food I eat. Now, it&amp;rsquo;s true that it takes less energy to power a bicycle than it does to power a car, but it&amp;rsquo;s also true that producing food energy can be more ecologically harmful than burning gasoline, at least from a carbon footprint standpoint.</description></item><item><title>Deploying Hugo with Travis CI</title><link>https://jmcphers.github.io/blog/hugo-and-travis/</link><pubDate>Wed, 09 Nov 2016 00:00:00 +0000</pubDate><guid>https://jmcphers.github.io/blog/hugo-and-travis/</guid><description>As an occasional web developer, I used to build sites with Wordpress, but have recently become enamored with static site generators. There&amp;rsquo;s just something ineffably elegant about having the site pre-built.
There&amp;rsquo;s no code on the web server to break, or patch, or hack. There&amp;rsquo;s no server configuration to screw up. Static sites just Exist, in pristine immutability.
Even better, a static site is usually constructed with plain text files, which means you can use version control systems like Git to manage your content.</description></item><item><title>Lessons from 20 Years of Development</title><link>https://jmcphers.github.io/blog/dev-lessons/</link><pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate><guid>https://jmcphers.github.io/blog/dev-lessons/</guid><description>I&amp;rsquo;ve been writing software professionally for most of the last two decades. In this time I&amp;rsquo;ve worked just about everywhere: on government contracts, at healthcare companies, in universities, at very big companies (more than 100K employees) and very small ones (fewer than 10 employees). I&amp;rsquo;ve written clients, servers, web applications, utilities, plugins, and frameworks.
Here are some of the things I&amp;rsquo;ve learned over those twenty years. They&amp;rsquo;re my opinions, but they&amp;rsquo;ve served me well.</description></item><item><title>Password Management</title><link>https://jmcphers.github.io/blog/passwords/</link><pubDate>Sun, 08 May 2016 12:32:32 +0000</pubDate><guid>https://jmcphers.github.io/blog/passwords/</guid><description>Introduction Everyone has their own way of managing the dozens of passwords they need to sign on to online services. Some people use the same password everywhere. Others use sticky notes or a notepad shoved into a desk drawer. If you&amp;rsquo;re technically inclined, you might use a password manager. I&amp;rsquo;ve been using the same password management system for almost half a decade now, and I&amp;rsquo;ve been very pleased with it. I&amp;rsquo;m publishing it here in hopes it will be helpful to others.</description></item><item><title>Finding Circular Primes in Go</title><link>https://jmcphers.github.io/blog/go-circular-primes/</link><pubDate>Thu, 03 Sep 2015 12:32:32 +0000</pubDate><guid>https://jmcphers.github.io/blog/go-circular-primes/</guid><description>Recently a friend of mine posted the following programming challenge, which he&amp;rsquo;d received as an interview question.
A number is called a circular prime if it is prime and all of its rotations are primes.
For example the number 197 has two rotations: 971, and 719. Both of them are prime.
There are thirteen such primes below 100: 2, 3, 5, 7, 11, 13, 17, 31, 37, 71, 73, 79, and 97.</description></item><item><title>Android and Captive Portals</title><link>https://jmcphers.github.io/blog/android-captive-portal/</link><pubDate>Sat, 29 Aug 2015 08:04:43 +0000</pubDate><guid>https://jmcphers.github.io/blog/android-captive-portal/</guid><description>Our family stayed at a hotel that offered free AT&amp;amp;T WiFi with an access code was distributed at the lobby.
&amp;ldquo;Just connect to the network attwifi and enter the code,&amp;rdquo; the brochure said.
The network had a captive portal, a page you had to open to enter your code before your device would be allowed to use the Internet.
Ordinarily, my Android phone (running Lollipop) detects this and shows a notification asking me to sign into the network.</description></item><item><title>Obfuscating IDs</title><link>https://jmcphers.github.io/blog/id-obfuscation/</link><pubDate>Thu, 20 Aug 2015 15:04:43 +0000</pubDate><guid>https://jmcphers.github.io/blog/id-obfuscation/</guid><description>Auto-incrementing IDs are great. When you&amp;rsquo;re picking a method for generating unique IDs in a system, auto-incrementing IDs (1, 2, 3, &amp;hellip;) are often a good choice. These have a number of advantages over more complicated techniques:
They are very fast to generate and require no random number generation or seeding. Their representation is short and simple compared to e.g. GUIDs. There is no need to test for collisions or uniqueness.</description></item><item><title>JavaScript: When an Array isn't an Array</title><link>https://jmcphers.github.io/blog/arrays/</link><pubDate>Tue, 18 Aug 2015 21:04:43 +0000</pubDate><guid>https://jmcphers.github.io/blog/arrays/</guid><description>Recently, I was investigating a JavaScript bug in which an array serialized differently when it was created in another window. Let&amp;rsquo;s say foo is an array created in this window, and bar is an array created in another window.
&amp;gt; var foo = [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] &amp;gt; var bar = window.opener.foo; Now, let&amp;rsquo;s try to serialize them. (serialize is not a real method, but it illustrates the problem.)
&amp;gt; foo [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] &amp;gt; serialize(foo) &amp;quot;['a', 'b', 'c']&amp;quot; &amp;gt; bar [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] &amp;gt; serialize(bar) &amp;quot;{'0': 'a', '1': 'b', '2': 'c'}&amp;quot; Wait, what?</description></item><item><title>Hello, world!</title><link>https://jmcphers.github.io/blog/welcome-to-jekyll/</link><pubDate>Thu, 13 Aug 2015 13:04:43 +0000</pubDate><guid>https://jmcphers.github.io/blog/welcome-to-jekyll/</guid><description>I made a blog, with Jekyll. This is that blog. Things will be posted here.</description></item></channel></rss>