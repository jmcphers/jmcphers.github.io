---
layout: post
title:  "Obfuscating IDs"
date:   2015-08-20 15:04:43
categories: techniques
---

When you're picking a method for generating unique IDs in a system,
auto-incrementing IDs are often a good choice. These have a number of
advantages over more complicated techniques:

- They are very fast to generate and require no random number seeding.
- Their representation is short and simple compared to e.g. GUIDs. 
- There is no need to test for collisions or uniqueness.
- They are natively generated by many systems; for instance, many relational 
  databases support them out of the box.

However, they do have one unpleasant downside: *they're often too transparent*. 

For instance, let's say that you're on a website and you notice that your own
user ID is 48203.

    http://mysite.com/userprofile?userid=48203

Now, using only this information, you can infer a lot more:

- If you know the ID of any other user, you also know whether they made their
  profile before you or after you. If their number is close to yours, you can
  even know about when their profile was created.
- You know that 48202 is probably a valid user, and so is 48204. You can try
  to see their profiles, too.
- If the service does not return an opaque error when an invalid ID is
  accessed, you can quickly and easily figure out how many users are in the
  system.
- If you can do the above, you can also predict the IDs that new users will be
  assigned, which may help you mount an attack.

